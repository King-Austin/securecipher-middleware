# Generated by Django 5.2.2 on 2025-07-06 01:42

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("crypto_engine", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MiddlewareKey",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique key identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "private_key_pem",
                    models.TextField(
                        help_text="PEM encoded private key (stored securely)"
                    ),
                ),
                (
                    "public_key_pem",
                    models.TextField(help_text="PEM encoded public key"),
                ),
                (
                    "fingerprint",
                    models.CharField(
                        db_index=True,
                        help_text="SHA-256 hash of the public key",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "key_type",
                    models.CharField(
                        default="ECDH",
                        help_text="Type of key (ECDH, ECDSA, etc.)",
                        max_length=20,
                    ),
                ),
                (
                    "curve",
                    models.CharField(
                        default="P-384", help_text="Elliptic curve used", max_length=20
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this key is currently active"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the key was generated"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the key expires (null for no expiration)",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description or purpose of this key",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name": "Middleware Key",
                "verbose_name_plural": "Middleware Keys",
                "db_table": "crypto_middleware_keys",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["is_active"], name="crypto_midd_is_acti_6a8e83_idx"
                    ),
                    models.Index(
                        fields=["fingerprint"], name="crypto_midd_fingerp_e26d64_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="crypto_midd_created_bd0a16_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TransactionLog",
            fields=[
                (
                    "tx_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique transaction identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "target",
                    models.CharField(
                        help_text="Target service or operation", max_length=50
                    ),
                ),
                (
                    "client_pubkey",
                    models.TextField(help_text="Client's public key PEM"),
                ),
                (
                    "payload",
                    models.TextField(help_text="JSON serialized transaction data"),
                ),
                (
                    "signature_status",
                    models.BooleanField(
                        default=False, help_text="Whether the signature was valid"
                    ),
                ),
                (
                    "request_ip",
                    models.GenericIPAddressField(help_text="Client IP address"),
                ),
                (
                    "request_timestamp",
                    models.DateTimeField(help_text="When the request was received"),
                ),
                (
                    "response_timestamp",
                    models.DateTimeField(
                        blank=True, help_text="When the response was sent", null=True
                    ),
                ),
                (
                    "processing_time_ms",
                    models.IntegerField(
                        blank=True,
                        help_text="Processing time in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        default="pending",
                        help_text="Transaction status (pending, completed, failed, etc.)",
                        max_length=20,
                    ),
                ),
                (
                    "response_data",
                    models.TextField(
                        blank=True, help_text="JSON serialized response data"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if transaction failed"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who performed the transaction",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Transaction Log",
                "verbose_name_plural": "Transaction Logs",
                "db_table": "crypto_transaction_logs",
                "ordering": ["-request_timestamp"],
                "indexes": [
                    models.Index(
                        fields=["request_timestamp"],
                        name="crypto_tran_request_bd85d0_idx",
                    ),
                    models.Index(
                        fields=["user"], name="crypto_tran_user_id_50cbb6_idx"
                    ),
                    models.Index(
                        fields=["status"], name="crypto_tran_status_d76f02_idx"
                    ),
                    models.Index(
                        fields=["target"], name="crypto_tran_target_4d8aa0_idx"
                    ),
                ],
            },
        ),
    ]
